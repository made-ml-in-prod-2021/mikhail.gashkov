version: '3.7'
# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=True
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
  - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}


x-airflow-image: &airflow_image apache/airflow:2.0.0-python3.6
# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
  init:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    depends_on:
      - postgres
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: >-
      -c 'airflow db init
      && airflow users create
      --username admin
      --password admin
      --firstname Anonymous
      --lastname Admin
      --role Admin
      --email admin@example.org'

  webserver:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: mgashkov/airflow-docker

    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow-docker/logs
    environment: *airflow_environment
    command: webserver

  scheduler:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: mgashkov/airflow-docker

    restart: always
    depends_on:
      - postgres
    volumes:
      - logs:/opt/airflow-docker/logs
      - ./dags/:/opt/airflow-docker/dags/
      - ./data/:/opt/airflow-docker/data/
      - /var/run/docker.sock:/var/run/docker.sock
    environment: *airflow_environment
    command: scheduler

  ml_base:
    build:
      context: images/airflow-ml-base
    image: mgashkov/airflow-ml-base
    restart: "on-failure"

  generate_data:
    build:
      context: images/airflow-generate-data
    image: mgashkov/airflow-generate-data
    restart: "on-failure"

  preprocess:
    build:
      context: images/airflow-preprocess
    image: mgashkov/airflow-preprocess
    restart: "on-failure"

  split:
    build:
      context: images/airflow-split
    image: mgashkov/airflow-split
    restart: "on-failure"

  train:
    build:
      context: images/airflow-train
    image: mgashkov/airflow-train
    restart: "on-failure"

  validate:
    build:
      context: images/airflow-validate
    image: mgashkov/airflow-validate
    restart: "on-failure"

  predict:
    build:
      context: images/airflow-predict
    image: mgashkov/airflow-predict
    restart: "on-failure"


volumes:
  logs: